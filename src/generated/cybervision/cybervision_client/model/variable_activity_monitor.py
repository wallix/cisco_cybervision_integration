# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class VariableActivityMonitor(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            accessBy = schemas.StrSchema
            accessType = schemas.StrSchema
        
            @staticmethod
            def extraField() -> typing.Type['ExtraFields']:
                return ExtraFields
            firstAccess = schemas.DateTimeSchema
            id = schemas.StrSchema
            label = schemas.StrSchema
            lastAccess = schemas.DateTimeSchema
            __annotations__ = {
                "accessBy": accessBy,
                "accessType": accessType,
                "extraField": extraField,
                "firstAccess": firstAccess,
                "id": id,
                "label": label,
                "lastAccess": lastAccess,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessBy"]) -> MetaOapg.properties.accessBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessType"]) -> MetaOapg.properties.accessType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extraField"]) -> 'ExtraFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstAccess"]) -> MetaOapg.properties.firstAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastAccess"]) -> MetaOapg.properties.lastAccess: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accessBy", "accessType", "extraField", "firstAccess", "id", "label", "lastAccess", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessBy"]) -> typing.Union[MetaOapg.properties.accessBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessType"]) -> typing.Union[MetaOapg.properties.accessType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extraField"]) -> typing.Union['ExtraFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstAccess"]) -> typing.Union[MetaOapg.properties.firstAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastAccess"]) -> typing.Union[MetaOapg.properties.lastAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accessBy", "accessType", "extraField", "firstAccess", "id", "label", "lastAccess", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        accessBy: typing.Union[MetaOapg.properties.accessBy, str, schemas.Unset] = schemas.unset,
        accessType: typing.Union[MetaOapg.properties.accessType, str, schemas.Unset] = schemas.unset,
        extraField: typing.Union['ExtraFields', schemas.Unset] = schemas.unset,
        firstAccess: typing.Union[MetaOapg.properties.firstAccess, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        lastAccess: typing.Union[MetaOapg.properties.lastAccess, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VariableActivityMonitor':
        return super().__new__(
            cls,
            *_args,
            accessBy=accessBy,
            accessType=accessType,
            extraField=extraField,
            firstAccess=firstAccess,
            id=id,
            label=label,
            lastAccess=lastAccess,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.extra_fields import ExtraFields
