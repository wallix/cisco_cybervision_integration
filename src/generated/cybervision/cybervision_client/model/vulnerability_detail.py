# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class VulnerabilityDetail(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            cve = schemas.StrSchema
            cvss = schemas.Float64Schema
            cvssVectorString = schemas.StrSchema
            fullDescription = schemas.StrSchema
            id = schemas.StrSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VulnerabilityLink']:
                        return VulnerabilityLink
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['VulnerabilityLink'], typing.List['VulnerabilityLink']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VulnerabilityLink':
                    return super().__getitem__(i)
            publishTime = schemas.Int64Schema
            solution = schemas.StrSchema
            summary = schemas.StrSchema
            title = schemas.StrSchema
            vendorId = schemas.StrSchema
            version = schemas.Float64Schema
            __annotations__ = {
                "cve": cve,
                "cvss": cvss,
                "cvssVectorString": cvssVectorString,
                "fullDescription": fullDescription,
                "id": id,
                "links": links,
                "publishTime": publishTime,
                "solution": solution,
                "summary": summary,
                "title": title,
                "vendorId": vendorId,
                "version": version,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cve"]) -> MetaOapg.properties.cve: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cvss"]) -> MetaOapg.properties.cvss: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cvssVectorString"]) -> MetaOapg.properties.cvssVectorString: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullDescription"]) -> MetaOapg.properties.fullDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publishTime"]) -> MetaOapg.properties.publishTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["solution"]) -> MetaOapg.properties.solution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendorId"]) -> MetaOapg.properties.vendorId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cve", "cvss", "cvssVectorString", "fullDescription", "id", "links", "publishTime", "solution", "summary", "title", "vendorId", "version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cve"]) -> typing.Union[MetaOapg.properties.cve, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cvss"]) -> typing.Union[MetaOapg.properties.cvss, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cvssVectorString"]) -> typing.Union[MetaOapg.properties.cvssVectorString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullDescription"]) -> typing.Union[MetaOapg.properties.fullDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publishTime"]) -> typing.Union[MetaOapg.properties.publishTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["solution"]) -> typing.Union[MetaOapg.properties.solution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendorId"]) -> typing.Union[MetaOapg.properties.vendorId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cve", "cvss", "cvssVectorString", "fullDescription", "id", "links", "publishTime", "solution", "summary", "title", "vendorId", "version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        cve: typing.Union[MetaOapg.properties.cve, str, schemas.Unset] = schemas.unset,
        cvss: typing.Union[MetaOapg.properties.cvss, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cvssVectorString: typing.Union[MetaOapg.properties.cvssVectorString, str, schemas.Unset] = schemas.unset,
        fullDescription: typing.Union[MetaOapg.properties.fullDescription, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        publishTime: typing.Union[MetaOapg.properties.publishTime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        solution: typing.Union[MetaOapg.properties.solution, str, schemas.Unset] = schemas.unset,
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        vendorId: typing.Union[MetaOapg.properties.vendorId, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VulnerabilityDetail':
        return super().__new__(
            cls,
            *_args,
            cve=cve,
            cvss=cvss,
            cvssVectorString=cvssVectorString,
            fullDescription=fullDescription,
            id=id,
            links=links,
            publishTime=publishTime,
            solution=solution,
            summary=summary,
            title=title,
            vendorId=vendorId,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.vulnerability_link import VulnerabilityLink
