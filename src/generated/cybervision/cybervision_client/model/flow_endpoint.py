# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class FlowEndpoint(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    JSON FlowEndpoint representation
    """


    class MetaOapg:
        
        class properties:
            customLabel = schemas.StrSchema
        
            @staticmethod
            def group() -> typing.Type['Group']:
                return Group
            icon = schemas.StrSchema
            id = schemas.StrSchema
            label = schemas.StrSchema
            originalLabel = schemas.StrSchema
            __annotations__ = {
                "customLabel": customLabel,
                "group": group,
                "icon": icon,
                "id": id,
                "label": label,
                "originalLabel": originalLabel,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customLabel"]) -> MetaOapg.properties.customLabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'Group': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalLabel"]) -> MetaOapg.properties.originalLabel: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["customLabel", "group", "icon", "id", "label", "originalLabel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customLabel"]) -> typing.Union[MetaOapg.properties.customLabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union['Group', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> typing.Union[MetaOapg.properties.icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalLabel"]) -> typing.Union[MetaOapg.properties.originalLabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customLabel", "group", "icon", "id", "label", "originalLabel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        customLabel: typing.Union[MetaOapg.properties.customLabel, str, schemas.Unset] = schemas.unset,
        group: typing.Union['Group', schemas.Unset] = schemas.unset,
        icon: typing.Union[MetaOapg.properties.icon, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        originalLabel: typing.Union[MetaOapg.properties.originalLabel, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FlowEndpoint':
        return super().__new__(
            cls,
            *_args,
            customLabel=customLabel,
            group=group,
            icon=icon,
            id=id,
            label=label,
            originalLabel=originalLabel,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.group import Group
