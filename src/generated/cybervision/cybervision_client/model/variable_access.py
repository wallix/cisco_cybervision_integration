# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class VariableAccess(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def component() -> typing.Type['VariableAccessComponent']:
                return VariableAccessComponent
        
            @staticmethod
            def device() -> typing.Type['VariableAccessComponent']:
                return VariableAccessComponent
            firstAccess = schemas.Int64Schema
            id = schemas.StrSchema
            lastAccess = schemas.Int64Schema
            
            
            class types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'types':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "component": component,
                "device": device,
                "firstAccess": firstAccess,
                "id": id,
                "lastAccess": lastAccess,
                "types": types,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["component"]) -> 'VariableAccessComponent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device"]) -> 'VariableAccessComponent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstAccess"]) -> MetaOapg.properties.firstAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastAccess"]) -> MetaOapg.properties.lastAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["types"]) -> MetaOapg.properties.types: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["component", "device", "firstAccess", "id", "lastAccess", "types", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["component"]) -> typing.Union['VariableAccessComponent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> typing.Union['VariableAccessComponent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstAccess"]) -> typing.Union[MetaOapg.properties.firstAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastAccess"]) -> typing.Union[MetaOapg.properties.lastAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["types"]) -> typing.Union[MetaOapg.properties.types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["component", "device", "firstAccess", "id", "lastAccess", "types", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        component: typing.Union['VariableAccessComponent', schemas.Unset] = schemas.unset,
        device: typing.Union['VariableAccessComponent', schemas.Unset] = schemas.unset,
        firstAccess: typing.Union[MetaOapg.properties.firstAccess, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        lastAccess: typing.Union[MetaOapg.properties.lastAccess, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        types: typing.Union[MetaOapg.properties.types, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VariableAccess':
        return super().__new__(
            cls,
            *_args,
            component=component,
            device=device,
            firstAccess=firstAccess,
            id=id,
            lastAccess=lastAccess,
            types=types,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.variable_access_component import VariableAccessComponent
