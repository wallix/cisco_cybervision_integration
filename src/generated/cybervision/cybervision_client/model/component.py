# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class Component(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    JSON Component representation
    """


    class MetaOapg:
        
        class properties:
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Tag']:
                        return Tag
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Tag'], typing.List['Tag']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tag':
                    return super().__getitem__(i)
        
            @staticmethod
            def aggregation() -> typing.Type['Aggregation']:
                return Aggregation
            
            
            class ancestors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GroupAncestor']:
                        return GroupAncestor
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['GroupAncestor'], typing.List['GroupAncestor']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ancestors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GroupAncestor':
                    return super().__getitem__(i)
            credentialsCount = schemas.Int64Schema
            customLabel = schemas.StrSchema
        
            @staticmethod
            def device() -> typing.Type['LightDevice']:
                return LightDevice
            
            
            class differences(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Difference']:
                        return Difference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Difference'], typing.List['Difference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'differences':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Difference':
                    return super().__getitem__(i)
            eventsCount = schemas.Int64Schema
            
            
            class extra_fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ExtraField']:
                        return ExtraField
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ExtraField'], typing.List['ExtraField']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'extra_fields':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ExtraField':
                    return super().__getitem__(i)
            firstActivity = schemas.Int64Schema
            flowsCount = schemas.Int64Schema
            
            
            class flowsTags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Tag']:
                        return Tag
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Tag'], typing.List['Tag']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flowsTags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tag':
                    return super().__getitem__(i)
        
            @staticmethod
            def group() -> typing.Type['Group']:
                return Group
            icon = schemas.StrSchema
            id = schemas.StrSchema
            ip = schemas.StrSchema
            label = schemas.StrSchema
            lastActivity = schemas.Int64Schema
            mac = schemas.StrSchema
            newVariableAccess = schemas.Int64Schema
        
            @staticmethod
            def normalizedProperties() -> typing.Type['PropertyTupleByPosition']:
                return PropertyTupleByPosition
            originalLabel = schemas.StrSchema
        
            @staticmethod
            def otherProperties() -> typing.Type['PropertyTupleByPosition']:
                return PropertyTupleByPosition
            
            
            class reasons(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reasons':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            requestsCount = schemas.Int64Schema
            
            
            class sensorNames(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sensorNames':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            status = schemas.StrSchema
            
            
            class userProperties(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserPropertyTuple']:
                        return UserPropertyTuple
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['UserPropertyTuple'], typing.List['UserPropertyTuple']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userProperties':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserPropertyTuple':
                    return super().__getitem__(i)
            variablesCount = schemas.Int64Schema
            vulnerabilitiesCount = schemas.Int64Schema
            __annotations__ = {
                "tags": tags,
                "aggregation": aggregation,
                "ancestors": ancestors,
                "credentialsCount": credentialsCount,
                "customLabel": customLabel,
                "device": device,
                "differences": differences,
                "eventsCount": eventsCount,
                "extra_fields": extra_fields,
                "firstActivity": firstActivity,
                "flowsCount": flowsCount,
                "flowsTags": flowsTags,
                "group": group,
                "icon": icon,
                "id": id,
                "ip": ip,
                "label": label,
                "lastActivity": lastActivity,
                "mac": mac,
                "newVariableAccess": newVariableAccess,
                "normalizedProperties": normalizedProperties,
                "originalLabel": originalLabel,
                "otherProperties": otherProperties,
                "reasons": reasons,
                "requestsCount": requestsCount,
                "sensorNames": sensorNames,
                "status": status,
                "userProperties": userProperties,
                "variablesCount": variablesCount,
                "vulnerabilitiesCount": vulnerabilitiesCount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregation"]) -> 'Aggregation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ancestors"]) -> MetaOapg.properties.ancestors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentialsCount"]) -> MetaOapg.properties.credentialsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customLabel"]) -> MetaOapg.properties.customLabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device"]) -> 'LightDevice': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["differences"]) -> MetaOapg.properties.differences: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventsCount"]) -> MetaOapg.properties.eventsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_fields"]) -> MetaOapg.properties.extra_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstActivity"]) -> MetaOapg.properties.firstActivity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flowsCount"]) -> MetaOapg.properties.flowsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flowsTags"]) -> MetaOapg.properties.flowsTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'Group': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip"]) -> MetaOapg.properties.ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastActivity"]) -> MetaOapg.properties.lastActivity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac"]) -> MetaOapg.properties.mac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newVariableAccess"]) -> MetaOapg.properties.newVariableAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normalizedProperties"]) -> 'PropertyTupleByPosition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalLabel"]) -> MetaOapg.properties.originalLabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherProperties"]) -> 'PropertyTupleByPosition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reasons"]) -> MetaOapg.properties.reasons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestsCount"]) -> MetaOapg.properties.requestsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensorNames"]) -> MetaOapg.properties.sensorNames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userProperties"]) -> MetaOapg.properties.userProperties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variablesCount"]) -> MetaOapg.properties.variablesCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vulnerabilitiesCount"]) -> MetaOapg.properties.vulnerabilitiesCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "aggregation", "ancestors", "credentialsCount", "customLabel", "device", "differences", "eventsCount", "extra_fields", "firstActivity", "flowsCount", "flowsTags", "group", "icon", "id", "ip", "label", "lastActivity", "mac", "newVariableAccess", "normalizedProperties", "originalLabel", "otherProperties", "reasons", "requestsCount", "sensorNames", "status", "userProperties", "variablesCount", "vulnerabilitiesCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregation"]) -> typing.Union['Aggregation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ancestors"]) -> typing.Union[MetaOapg.properties.ancestors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentialsCount"]) -> typing.Union[MetaOapg.properties.credentialsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customLabel"]) -> typing.Union[MetaOapg.properties.customLabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> typing.Union['LightDevice', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["differences"]) -> typing.Union[MetaOapg.properties.differences, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventsCount"]) -> typing.Union[MetaOapg.properties.eventsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_fields"]) -> typing.Union[MetaOapg.properties.extra_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstActivity"]) -> typing.Union[MetaOapg.properties.firstActivity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flowsCount"]) -> typing.Union[MetaOapg.properties.flowsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flowsTags"]) -> typing.Union[MetaOapg.properties.flowsTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union['Group', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> typing.Union[MetaOapg.properties.icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip"]) -> typing.Union[MetaOapg.properties.ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastActivity"]) -> typing.Union[MetaOapg.properties.lastActivity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac"]) -> typing.Union[MetaOapg.properties.mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newVariableAccess"]) -> typing.Union[MetaOapg.properties.newVariableAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normalizedProperties"]) -> typing.Union['PropertyTupleByPosition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalLabel"]) -> typing.Union[MetaOapg.properties.originalLabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherProperties"]) -> typing.Union['PropertyTupleByPosition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reasons"]) -> typing.Union[MetaOapg.properties.reasons, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestsCount"]) -> typing.Union[MetaOapg.properties.requestsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensorNames"]) -> typing.Union[MetaOapg.properties.sensorNames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userProperties"]) -> typing.Union[MetaOapg.properties.userProperties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variablesCount"]) -> typing.Union[MetaOapg.properties.variablesCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vulnerabilitiesCount"]) -> typing.Union[MetaOapg.properties.vulnerabilitiesCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "aggregation", "ancestors", "credentialsCount", "customLabel", "device", "differences", "eventsCount", "extra_fields", "firstActivity", "flowsCount", "flowsTags", "group", "icon", "id", "ip", "label", "lastActivity", "mac", "newVariableAccess", "normalizedProperties", "originalLabel", "otherProperties", "reasons", "requestsCount", "sensorNames", "status", "userProperties", "variablesCount", "vulnerabilitiesCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
        aggregation: typing.Union['Aggregation', schemas.Unset] = schemas.unset,
        ancestors: typing.Union[MetaOapg.properties.ancestors, list, tuple, schemas.Unset] = schemas.unset,
        credentialsCount: typing.Union[MetaOapg.properties.credentialsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        customLabel: typing.Union[MetaOapg.properties.customLabel, str, schemas.Unset] = schemas.unset,
        device: typing.Union['LightDevice', schemas.Unset] = schemas.unset,
        differences: typing.Union[MetaOapg.properties.differences, list, tuple, schemas.Unset] = schemas.unset,
        eventsCount: typing.Union[MetaOapg.properties.eventsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        extra_fields: typing.Union[MetaOapg.properties.extra_fields, list, tuple, schemas.Unset] = schemas.unset,
        firstActivity: typing.Union[MetaOapg.properties.firstActivity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        flowsCount: typing.Union[MetaOapg.properties.flowsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        flowsTags: typing.Union[MetaOapg.properties.flowsTags, list, tuple, schemas.Unset] = schemas.unset,
        group: typing.Union['Group', schemas.Unset] = schemas.unset,
        icon: typing.Union[MetaOapg.properties.icon, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        ip: typing.Union[MetaOapg.properties.ip, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        lastActivity: typing.Union[MetaOapg.properties.lastActivity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mac: typing.Union[MetaOapg.properties.mac, str, schemas.Unset] = schemas.unset,
        newVariableAccess: typing.Union[MetaOapg.properties.newVariableAccess, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        normalizedProperties: typing.Union['PropertyTupleByPosition', schemas.Unset] = schemas.unset,
        originalLabel: typing.Union[MetaOapg.properties.originalLabel, str, schemas.Unset] = schemas.unset,
        otherProperties: typing.Union['PropertyTupleByPosition', schemas.Unset] = schemas.unset,
        reasons: typing.Union[MetaOapg.properties.reasons, list, tuple, schemas.Unset] = schemas.unset,
        requestsCount: typing.Union[MetaOapg.properties.requestsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sensorNames: typing.Union[MetaOapg.properties.sensorNames, list, tuple, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        userProperties: typing.Union[MetaOapg.properties.userProperties, list, tuple, schemas.Unset] = schemas.unset,
        variablesCount: typing.Union[MetaOapg.properties.variablesCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        vulnerabilitiesCount: typing.Union[MetaOapg.properties.vulnerabilitiesCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Component':
        return super().__new__(
            cls,
            *_args,
            tags=tags,
            aggregation=aggregation,
            ancestors=ancestors,
            credentialsCount=credentialsCount,
            customLabel=customLabel,
            device=device,
            differences=differences,
            eventsCount=eventsCount,
            extra_fields=extra_fields,
            firstActivity=firstActivity,
            flowsCount=flowsCount,
            flowsTags=flowsTags,
            group=group,
            icon=icon,
            id=id,
            ip=ip,
            label=label,
            lastActivity=lastActivity,
            mac=mac,
            newVariableAccess=newVariableAccess,
            normalizedProperties=normalizedProperties,
            originalLabel=originalLabel,
            otherProperties=otherProperties,
            reasons=reasons,
            requestsCount=requestsCount,
            sensorNames=sensorNames,
            status=status,
            userProperties=userProperties,
            variablesCount=variablesCount,
            vulnerabilitiesCount=vulnerabilitiesCount,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.aggregation import Aggregation
from cybervision_client.model.difference import Difference
from cybervision_client.model.extra_field import ExtraField
from cybervision_client.model.group import Group
from cybervision_client.model.group_ancestor import GroupAncestor
from cybervision_client.model.light_device import LightDevice
from cybervision_client.model.property_tuple_by_position import PropertyTupleByPosition
from cybervision_client.model.tag import Tag
from cybervision_client.model.user_property_tuple import UserPropertyTuple
