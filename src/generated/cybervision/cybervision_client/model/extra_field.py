# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class ExtraField(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ExtraField json representation
    """


    class MetaOapg:
        
        class properties:
            CenterId = schemas.StrSchema
            CreationTime = schemas.DateTimeSchema
            Id = schemas.StrSchema
            Label = schemas.StrSchema
            LastUpdate = schemas.DateTimeSchema
            ParentId = schemas.StrSchema
            Type = schemas.StrSchema
            Value = schemas.StrSchema
            __annotations__ = {
                "CenterId": CenterId,
                "CreationTime": CreationTime,
                "Id": Id,
                "Label": Label,
                "LastUpdate": LastUpdate,
                "ParentId": ParentId,
                "Type": Type,
                "Value": Value,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CenterId"]) -> MetaOapg.properties.CenterId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreationTime"]) -> MetaOapg.properties.CreationTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Id"]) -> MetaOapg.properties.Id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Label"]) -> MetaOapg.properties.Label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastUpdate"]) -> MetaOapg.properties.LastUpdate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ParentId"]) -> MetaOapg.properties.ParentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Value"]) -> MetaOapg.properties.Value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["CenterId", "CreationTime", "Id", "Label", "LastUpdate", "ParentId", "Type", "Value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CenterId"]) -> typing.Union[MetaOapg.properties.CenterId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreationTime"]) -> typing.Union[MetaOapg.properties.CreationTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Id"]) -> typing.Union[MetaOapg.properties.Id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Label"]) -> typing.Union[MetaOapg.properties.Label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastUpdate"]) -> typing.Union[MetaOapg.properties.LastUpdate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ParentId"]) -> typing.Union[MetaOapg.properties.ParentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> typing.Union[MetaOapg.properties.Type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Value"]) -> typing.Union[MetaOapg.properties.Value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["CenterId", "CreationTime", "Id", "Label", "LastUpdate", "ParentId", "Type", "Value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        CenterId: typing.Union[MetaOapg.properties.CenterId, str, schemas.Unset] = schemas.unset,
        CreationTime: typing.Union[MetaOapg.properties.CreationTime, str, datetime, schemas.Unset] = schemas.unset,
        Id: typing.Union[MetaOapg.properties.Id, str, schemas.Unset] = schemas.unset,
        Label: typing.Union[MetaOapg.properties.Label, str, schemas.Unset] = schemas.unset,
        LastUpdate: typing.Union[MetaOapg.properties.LastUpdate, str, datetime, schemas.Unset] = schemas.unset,
        ParentId: typing.Union[MetaOapg.properties.ParentId, str, schemas.Unset] = schemas.unset,
        Type: typing.Union[MetaOapg.properties.Type, str, schemas.Unset] = schemas.unset,
        Value: typing.Union[MetaOapg.properties.Value, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExtraField':
        return super().__new__(
            cls,
            *_args,
            CenterId=CenterId,
            CreationTime=CreationTime,
            Id=Id,
            Label=Label,
            LastUpdate=LastUpdate,
            ParentId=ParentId,
            Type=Type,
            Value=Value,
            _configuration=_configuration,
            **kwargs,
        )
