# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class JsonVulnerabilityFullInfosForDevice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            CVSS = schemas.Float64Schema
            CVSS_temporal = schemas.Float64Schema
            CVSS_vector_string = schemas.StrSchema
            CVSS_version = schemas.Float64Schema
            
            
            class ack(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AckInformations']:
                        return AckInformations
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AckInformations'], typing.List['AckInformations']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ack':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AckInformations':
                    return super().__getitem__(i)
            creation_time = schemas.DateTimeSchema
            cve = schemas.StrSchema
            full_description = schemas.StrSchema
            id = schemas.StrSchema
            is_all_cmp_ack = schemas.BoolSchema
            last_update = schemas.DateTimeSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['JsonVulnerabilityLink']:
                        return JsonVulnerabilityLink
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['JsonVulnerabilityLink'], typing.List['JsonVulnerabilityLink']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'JsonVulnerabilityLink':
                    return super().__getitem__(i)
            matching_time = schemas.DateTimeSchema
            publish_time = schemas.DateTimeSchema
            
            
            class reasons(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reasons':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            solution = schemas.StrSchema
            summary = schemas.StrSchema
            title = schemas.StrSchema
            vendor_id = schemas.StrSchema
            __annotations__ = {
                "CVSS": CVSS,
                "CVSS_temporal": CVSS_temporal,
                "CVSS_vector_string": CVSS_vector_string,
                "CVSS_version": CVSS_version,
                "ack": ack,
                "creation_time": creation_time,
                "cve": cve,
                "full_description": full_description,
                "id": id,
                "is_all_cmp_ack": is_all_cmp_ack,
                "last_update": last_update,
                "links": links,
                "matching_time": matching_time,
                "publish_time": publish_time,
                "reasons": reasons,
                "solution": solution,
                "summary": summary,
                "title": title,
                "vendor_id": vendor_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CVSS"]) -> MetaOapg.properties.CVSS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CVSS_temporal"]) -> MetaOapg.properties.CVSS_temporal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CVSS_vector_string"]) -> MetaOapg.properties.CVSS_vector_string: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CVSS_version"]) -> MetaOapg.properties.CVSS_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ack"]) -> MetaOapg.properties.ack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_time"]) -> MetaOapg.properties.creation_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cve"]) -> MetaOapg.properties.cve: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_description"]) -> MetaOapg.properties.full_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_all_cmp_ack"]) -> MetaOapg.properties.is_all_cmp_ack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_update"]) -> MetaOapg.properties.last_update: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matching_time"]) -> MetaOapg.properties.matching_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publish_time"]) -> MetaOapg.properties.publish_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reasons"]) -> MetaOapg.properties.reasons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["solution"]) -> MetaOapg.properties.solution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_id"]) -> MetaOapg.properties.vendor_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["CVSS", "CVSS_temporal", "CVSS_vector_string", "CVSS_version", "ack", "creation_time", "cve", "full_description", "id", "is_all_cmp_ack", "last_update", "links", "matching_time", "publish_time", "reasons", "solution", "summary", "title", "vendor_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CVSS"]) -> typing.Union[MetaOapg.properties.CVSS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CVSS_temporal"]) -> typing.Union[MetaOapg.properties.CVSS_temporal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CVSS_vector_string"]) -> typing.Union[MetaOapg.properties.CVSS_vector_string, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CVSS_version"]) -> typing.Union[MetaOapg.properties.CVSS_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ack"]) -> typing.Union[MetaOapg.properties.ack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_time"]) -> typing.Union[MetaOapg.properties.creation_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cve"]) -> typing.Union[MetaOapg.properties.cve, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_description"]) -> typing.Union[MetaOapg.properties.full_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_all_cmp_ack"]) -> typing.Union[MetaOapg.properties.is_all_cmp_ack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_update"]) -> typing.Union[MetaOapg.properties.last_update, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matching_time"]) -> typing.Union[MetaOapg.properties.matching_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publish_time"]) -> typing.Union[MetaOapg.properties.publish_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reasons"]) -> typing.Union[MetaOapg.properties.reasons, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["solution"]) -> typing.Union[MetaOapg.properties.solution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_id"]) -> typing.Union[MetaOapg.properties.vendor_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["CVSS", "CVSS_temporal", "CVSS_vector_string", "CVSS_version", "ack", "creation_time", "cve", "full_description", "id", "is_all_cmp_ack", "last_update", "links", "matching_time", "publish_time", "reasons", "solution", "summary", "title", "vendor_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        CVSS: typing.Union[MetaOapg.properties.CVSS, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        CVSS_temporal: typing.Union[MetaOapg.properties.CVSS_temporal, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        CVSS_vector_string: typing.Union[MetaOapg.properties.CVSS_vector_string, str, schemas.Unset] = schemas.unset,
        CVSS_version: typing.Union[MetaOapg.properties.CVSS_version, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ack: typing.Union[MetaOapg.properties.ack, list, tuple, schemas.Unset] = schemas.unset,
        creation_time: typing.Union[MetaOapg.properties.creation_time, str, datetime, schemas.Unset] = schemas.unset,
        cve: typing.Union[MetaOapg.properties.cve, str, schemas.Unset] = schemas.unset,
        full_description: typing.Union[MetaOapg.properties.full_description, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        is_all_cmp_ack: typing.Union[MetaOapg.properties.is_all_cmp_ack, bool, schemas.Unset] = schemas.unset,
        last_update: typing.Union[MetaOapg.properties.last_update, str, datetime, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        matching_time: typing.Union[MetaOapg.properties.matching_time, str, datetime, schemas.Unset] = schemas.unset,
        publish_time: typing.Union[MetaOapg.properties.publish_time, str, datetime, schemas.Unset] = schemas.unset,
        reasons: typing.Union[MetaOapg.properties.reasons, list, tuple, schemas.Unset] = schemas.unset,
        solution: typing.Union[MetaOapg.properties.solution, str, schemas.Unset] = schemas.unset,
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        vendor_id: typing.Union[MetaOapg.properties.vendor_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JsonVulnerabilityFullInfosForDevice':
        return super().__new__(
            cls,
            *_args,
            CVSS=CVSS,
            CVSS_temporal=CVSS_temporal,
            CVSS_vector_string=CVSS_vector_string,
            CVSS_version=CVSS_version,
            ack=ack,
            creation_time=creation_time,
            cve=cve,
            full_description=full_description,
            id=id,
            is_all_cmp_ack=is_all_cmp_ack,
            last_update=last_update,
            links=links,
            matching_time=matching_time,
            publish_time=publish_time,
            reasons=reasons,
            solution=solution,
            summary=summary,
            title=title,
            vendor_id=vendor_id,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.ack_informations import AckInformations
from cybervision_client.model.json_vulnerability_link import JsonVulnerabilityLink
