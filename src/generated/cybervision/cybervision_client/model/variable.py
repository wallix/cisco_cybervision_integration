# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class Variable(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class accesses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VariableAccess']:
                        return VariableAccess
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['VariableAccess'], typing.List['VariableAccess']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accesses':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VariableAccess':
                    return super().__getitem__(i)
            category = schemas.StrSchema
            
            
            class differences(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Difference']:
                        return Difference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Difference'], typing.List['Difference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'differences':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Difference':
                    return super().__getitem__(i)
            firstAccess = schemas.Int64Schema
            id = schemas.StrSchema
            label = schemas.StrSchema
            lastAccess = schemas.Int64Schema
            newVariableAccess = schemas.Int64Schema
            protocol = schemas.StrSchema
            status = schemas.StrSchema
            
            
            class types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'types':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "accesses": accesses,
                "category": category,
                "differences": differences,
                "firstAccess": firstAccess,
                "id": id,
                "label": label,
                "lastAccess": lastAccess,
                "newVariableAccess": newVariableAccess,
                "protocol": protocol,
                "status": status,
                "types": types,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accesses"]) -> MetaOapg.properties.accesses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["differences"]) -> MetaOapg.properties.differences: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstAccess"]) -> MetaOapg.properties.firstAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastAccess"]) -> MetaOapg.properties.lastAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newVariableAccess"]) -> MetaOapg.properties.newVariableAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocol"]) -> MetaOapg.properties.protocol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["types"]) -> MetaOapg.properties.types: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accesses", "category", "differences", "firstAccess", "id", "label", "lastAccess", "newVariableAccess", "protocol", "status", "types", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accesses"]) -> typing.Union[MetaOapg.properties.accesses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["differences"]) -> typing.Union[MetaOapg.properties.differences, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstAccess"]) -> typing.Union[MetaOapg.properties.firstAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastAccess"]) -> typing.Union[MetaOapg.properties.lastAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newVariableAccess"]) -> typing.Union[MetaOapg.properties.newVariableAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocol"]) -> typing.Union[MetaOapg.properties.protocol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["types"]) -> typing.Union[MetaOapg.properties.types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accesses", "category", "differences", "firstAccess", "id", "label", "lastAccess", "newVariableAccess", "protocol", "status", "types", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        accesses: typing.Union[MetaOapg.properties.accesses, list, tuple, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        differences: typing.Union[MetaOapg.properties.differences, list, tuple, schemas.Unset] = schemas.unset,
        firstAccess: typing.Union[MetaOapg.properties.firstAccess, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        lastAccess: typing.Union[MetaOapg.properties.lastAccess, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        newVariableAccess: typing.Union[MetaOapg.properties.newVariableAccess, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        protocol: typing.Union[MetaOapg.properties.protocol, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        types: typing.Union[MetaOapg.properties.types, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Variable':
        return super().__new__(
            cls,
            *_args,
            accesses=accesses,
            category=category,
            differences=differences,
            firstAccess=firstAccess,
            id=id,
            label=label,
            lastAccess=lastAccess,
            newVariableAccess=newVariableAccess,
            protocol=protocol,
            status=status,
            types=types,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.difference import Difference
from cybervision_client.model.variable_access import VariableAccess
