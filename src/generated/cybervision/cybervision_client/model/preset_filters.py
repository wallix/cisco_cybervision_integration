# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class PresetFilters(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    list all filters in a Preset
    """


    class MetaOapg:
        
        class properties:
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PresetTagFilter']:
                        return PresetTagFilter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PresetTagFilter'], typing.List['PresetTagFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PresetTagFilter':
                    return super().__getitem__(i)
            
            
            class centers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PresetCenterFilter']:
                        return PresetCenterFilter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PresetCenterFilter'], typing.List['PresetCenterFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'centers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PresetCenterFilter':
                    return super().__getitem__(i)
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PresetGroupFilter']:
                        return PresetGroupFilter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PresetGroupFilter'], typing.List['PresetGroupFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PresetGroupFilter':
                    return super().__getitem__(i)
            
            
            class networks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PresetNetworkFilter']:
                        return PresetNetworkFilter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PresetNetworkFilter'], typing.List['PresetNetworkFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'networks':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PresetNetworkFilter':
                    return super().__getitem__(i)
            
            
            class riskScores(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PresetRiskScoreFilter']:
                        return PresetRiskScoreFilter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PresetRiskScoreFilter'], typing.List['PresetRiskScoreFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'riskScores':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PresetRiskScoreFilter':
                    return super().__getitem__(i)
            
            
            class sensors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PresetSensorFilter']:
                        return PresetSensorFilter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PresetSensorFilter'], typing.List['PresetSensorFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sensors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PresetSensorFilter':
                    return super().__getitem__(i)
            __annotations__ = {
                "tags": tags,
                "centers": centers,
                "groups": groups,
                "networks": networks,
                "riskScores": riskScores,
                "sensors": sensors,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["centers"]) -> MetaOapg.properties.centers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networks"]) -> MetaOapg.properties.networks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskScores"]) -> MetaOapg.properties.riskScores: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensors"]) -> MetaOapg.properties.sensors: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "centers", "groups", "networks", "riskScores", "sensors", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["centers"]) -> typing.Union[MetaOapg.properties.centers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union[MetaOapg.properties.groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networks"]) -> typing.Union[MetaOapg.properties.networks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskScores"]) -> typing.Union[MetaOapg.properties.riskScores, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensors"]) -> typing.Union[MetaOapg.properties.sensors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "centers", "groups", "networks", "riskScores", "sensors", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
        centers: typing.Union[MetaOapg.properties.centers, list, tuple, schemas.Unset] = schemas.unset,
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, schemas.Unset] = schemas.unset,
        networks: typing.Union[MetaOapg.properties.networks, list, tuple, schemas.Unset] = schemas.unset,
        riskScores: typing.Union[MetaOapg.properties.riskScores, list, tuple, schemas.Unset] = schemas.unset,
        sensors: typing.Union[MetaOapg.properties.sensors, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PresetFilters':
        return super().__new__(
            cls,
            *_args,
            tags=tags,
            centers=centers,
            groups=groups,
            networks=networks,
            riskScores=riskScores,
            sensors=sensors,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.preset_center_filter import PresetCenterFilter
from cybervision_client.model.preset_group_filter import PresetGroupFilter
from cybervision_client.model.preset_network_filter import PresetNetworkFilter
from cybervision_client.model.preset_risk_score_filter import PresetRiskScoreFilter
from cybervision_client.model.preset_sensor_filter import PresetSensorFilter
from cybervision_client.model.preset_tag_filter import PresetTagFilter
