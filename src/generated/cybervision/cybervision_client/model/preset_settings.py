# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class PresetSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            activeBaselineId = schemas.StrSchema
        
            @staticmethod
            def defaultSeverities() -> typing.Type['DefaultSeverities']:
                return DefaultSeverities
            forceScanPeriod = schemas.BoolSchema
            lastEditUpdate = schemas.Int64Schema
            presetId = schemas.StrSchema
            scanPeriod = schemas.Int64Schema
            severityAckDifference = schemas.Int32Schema
            severityDeleteElement = schemas.Int32Schema
            severityDifferenceDetected = schemas.Int32Schema
            severityIgnoreDifference = schemas.Int32Schema
            severityNackDifference = schemas.Int32Schema
            __annotations__ = {
                "activeBaselineId": activeBaselineId,
                "defaultSeverities": defaultSeverities,
                "forceScanPeriod": forceScanPeriod,
                "lastEditUpdate": lastEditUpdate,
                "presetId": presetId,
                "scanPeriod": scanPeriod,
                "severityAckDifference": severityAckDifference,
                "severityDeleteElement": severityDeleteElement,
                "severityDifferenceDetected": severityDifferenceDetected,
                "severityIgnoreDifference": severityIgnoreDifference,
                "severityNackDifference": severityNackDifference,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeBaselineId"]) -> MetaOapg.properties.activeBaselineId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultSeverities"]) -> 'DefaultSeverities': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forceScanPeriod"]) -> MetaOapg.properties.forceScanPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastEditUpdate"]) -> MetaOapg.properties.lastEditUpdate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presetId"]) -> MetaOapg.properties.presetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scanPeriod"]) -> MetaOapg.properties.scanPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severityAckDifference"]) -> MetaOapg.properties.severityAckDifference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severityDeleteElement"]) -> MetaOapg.properties.severityDeleteElement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severityDifferenceDetected"]) -> MetaOapg.properties.severityDifferenceDetected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severityIgnoreDifference"]) -> MetaOapg.properties.severityIgnoreDifference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severityNackDifference"]) -> MetaOapg.properties.severityNackDifference: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["activeBaselineId", "defaultSeverities", "forceScanPeriod", "lastEditUpdate", "presetId", "scanPeriod", "severityAckDifference", "severityDeleteElement", "severityDifferenceDetected", "severityIgnoreDifference", "severityNackDifference", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeBaselineId"]) -> typing.Union[MetaOapg.properties.activeBaselineId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultSeverities"]) -> typing.Union['DefaultSeverities', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forceScanPeriod"]) -> typing.Union[MetaOapg.properties.forceScanPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastEditUpdate"]) -> typing.Union[MetaOapg.properties.lastEditUpdate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presetId"]) -> typing.Union[MetaOapg.properties.presetId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scanPeriod"]) -> typing.Union[MetaOapg.properties.scanPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severityAckDifference"]) -> typing.Union[MetaOapg.properties.severityAckDifference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severityDeleteElement"]) -> typing.Union[MetaOapg.properties.severityDeleteElement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severityDifferenceDetected"]) -> typing.Union[MetaOapg.properties.severityDifferenceDetected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severityIgnoreDifference"]) -> typing.Union[MetaOapg.properties.severityIgnoreDifference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severityNackDifference"]) -> typing.Union[MetaOapg.properties.severityNackDifference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["activeBaselineId", "defaultSeverities", "forceScanPeriod", "lastEditUpdate", "presetId", "scanPeriod", "severityAckDifference", "severityDeleteElement", "severityDifferenceDetected", "severityIgnoreDifference", "severityNackDifference", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        activeBaselineId: typing.Union[MetaOapg.properties.activeBaselineId, str, schemas.Unset] = schemas.unset,
        defaultSeverities: typing.Union['DefaultSeverities', schemas.Unset] = schemas.unset,
        forceScanPeriod: typing.Union[MetaOapg.properties.forceScanPeriod, bool, schemas.Unset] = schemas.unset,
        lastEditUpdate: typing.Union[MetaOapg.properties.lastEditUpdate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        presetId: typing.Union[MetaOapg.properties.presetId, str, schemas.Unset] = schemas.unset,
        scanPeriod: typing.Union[MetaOapg.properties.scanPeriod, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        severityAckDifference: typing.Union[MetaOapg.properties.severityAckDifference, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        severityDeleteElement: typing.Union[MetaOapg.properties.severityDeleteElement, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        severityDifferenceDetected: typing.Union[MetaOapg.properties.severityDifferenceDetected, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        severityIgnoreDifference: typing.Union[MetaOapg.properties.severityIgnoreDifference, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        severityNackDifference: typing.Union[MetaOapg.properties.severityNackDifference, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PresetSettings':
        return super().__new__(
            cls,
            *_args,
            activeBaselineId=activeBaselineId,
            defaultSeverities=defaultSeverities,
            forceScanPeriod=forceScanPeriod,
            lastEditUpdate=lastEditUpdate,
            presetId=presetId,
            scanPeriod=scanPeriod,
            severityAckDifference=severityAckDifference,
            severityDeleteElement=severityDeleteElement,
            severityDifferenceDetected=severityDifferenceDetected,
            severityIgnoreDifference=severityIgnoreDifference,
            severityNackDifference=severityNackDifference,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.default_severities import DefaultSeverities
