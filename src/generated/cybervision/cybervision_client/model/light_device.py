# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class LightDevice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Tag']:
                        return Tag
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Tag'], typing.List['Tag']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tag':
                    return super().__getitem__(i)
            customLabel = schemas.StrSchema
            deviceType = schemas.StrSchema
        
            @staticmethod
            def group() -> typing.Type['Group']:
                return Group
            icon = schemas.StrSchema
            id = schemas.StrSchema
            
            
            class ip(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ip':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            isDevice = schemas.BoolSchema
            label = schemas.StrSchema
            
            
            class mac(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mac':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            originalLabel = schemas.StrSchema
            situation = schemas.StrSchema
            __annotations__ = {
                "tags": tags,
                "customLabel": customLabel,
                "deviceType": deviceType,
                "group": group,
                "icon": icon,
                "id": id,
                "ip": ip,
                "isDevice": isDevice,
                "label": label,
                "mac": mac,
                "originalLabel": originalLabel,
                "situation": situation,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customLabel"]) -> MetaOapg.properties.customLabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceType"]) -> MetaOapg.properties.deviceType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'Group': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip"]) -> MetaOapg.properties.ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDevice"]) -> MetaOapg.properties.isDevice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac"]) -> MetaOapg.properties.mac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalLabel"]) -> MetaOapg.properties.originalLabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["situation"]) -> MetaOapg.properties.situation: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "customLabel", "deviceType", "group", "icon", "id", "ip", "isDevice", "label", "mac", "originalLabel", "situation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customLabel"]) -> typing.Union[MetaOapg.properties.customLabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceType"]) -> typing.Union[MetaOapg.properties.deviceType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union['Group', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> typing.Union[MetaOapg.properties.icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip"]) -> typing.Union[MetaOapg.properties.ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDevice"]) -> typing.Union[MetaOapg.properties.isDevice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac"]) -> typing.Union[MetaOapg.properties.mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalLabel"]) -> typing.Union[MetaOapg.properties.originalLabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["situation"]) -> typing.Union[MetaOapg.properties.situation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "customLabel", "deviceType", "group", "icon", "id", "ip", "isDevice", "label", "mac", "originalLabel", "situation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
        customLabel: typing.Union[MetaOapg.properties.customLabel, str, schemas.Unset] = schemas.unset,
        deviceType: typing.Union[MetaOapg.properties.deviceType, str, schemas.Unset] = schemas.unset,
        group: typing.Union['Group', schemas.Unset] = schemas.unset,
        icon: typing.Union[MetaOapg.properties.icon, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        ip: typing.Union[MetaOapg.properties.ip, list, tuple, schemas.Unset] = schemas.unset,
        isDevice: typing.Union[MetaOapg.properties.isDevice, bool, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        mac: typing.Union[MetaOapg.properties.mac, list, tuple, schemas.Unset] = schemas.unset,
        originalLabel: typing.Union[MetaOapg.properties.originalLabel, str, schemas.Unset] = schemas.unset,
        situation: typing.Union[MetaOapg.properties.situation, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LightDevice':
        return super().__new__(
            cls,
            *_args,
            tags=tags,
            customLabel=customLabel,
            deviceType=deviceType,
            group=group,
            icon=icon,
            id=id,
            ip=ip,
            isDevice=isDevice,
            label=label,
            mac=mac,
            originalLabel=originalLabel,
            situation=situation,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.group import Group
from cybervision_client.model.tag import Tag
