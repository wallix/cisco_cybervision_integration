# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class CountDifferences(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            changedActivity = schemas.Int64Schema
            changedComponent = schemas.Int64Schema
            newActivity = schemas.Int64Schema
            newComponent = schemas.Int64Schema
            __annotations__ = {
                "changedActivity": changedActivity,
                "changedComponent": changedComponent,
                "newActivity": newActivity,
                "newComponent": newComponent,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changedActivity"]) -> MetaOapg.properties.changedActivity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changedComponent"]) -> MetaOapg.properties.changedComponent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newActivity"]) -> MetaOapg.properties.newActivity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newComponent"]) -> MetaOapg.properties.newComponent: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["changedActivity", "changedComponent", "newActivity", "newComponent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changedActivity"]) -> typing.Union[MetaOapg.properties.changedActivity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changedComponent"]) -> typing.Union[MetaOapg.properties.changedComponent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newActivity"]) -> typing.Union[MetaOapg.properties.newActivity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newComponent"]) -> typing.Union[MetaOapg.properties.newComponent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["changedActivity", "changedComponent", "newActivity", "newComponent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        changedActivity: typing.Union[MetaOapg.properties.changedActivity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        changedComponent: typing.Union[MetaOapg.properties.changedComponent, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        newActivity: typing.Union[MetaOapg.properties.newActivity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        newComponent: typing.Union[MetaOapg.properties.newComponent, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CountDifferences':
        return super().__new__(
            cls,
            *_args,
            changedActivity=changedActivity,
            changedComponent=changedComponent,
            newActivity=newActivity,
            newComponent=newComponent,
            _configuration=_configuration,
            **kwargs,
        )
