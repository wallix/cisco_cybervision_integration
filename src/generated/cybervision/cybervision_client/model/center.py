# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class Center(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            enrolledAt = schemas.DateTimeSchema
            fingerprint = schemas.StrSchema
            hasSomeSensors = schemas.BoolSchema
            id = schemas.StrSchema
            ip = schemas.StrSchema
            label = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['CenterStatus']:
                return CenterStatus
            syncDelay = schemas.Int64Schema
            uptimeInSeconds = schemas.Int64Schema
        
            @staticmethod
            def versions() -> typing.Type['Versions']:
                return Versions
            __annotations__ = {
                "enrolledAt": enrolledAt,
                "fingerprint": fingerprint,
                "hasSomeSensors": hasSomeSensors,
                "id": id,
                "ip": ip,
                "label": label,
                "status": status,
                "syncDelay": syncDelay,
                "uptimeInSeconds": uptimeInSeconds,
                "versions": versions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrolledAt"]) -> MetaOapg.properties.enrolledAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fingerprint"]) -> MetaOapg.properties.fingerprint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasSomeSensors"]) -> MetaOapg.properties.hasSomeSensors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip"]) -> MetaOapg.properties.ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'CenterStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syncDelay"]) -> MetaOapg.properties.syncDelay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uptimeInSeconds"]) -> MetaOapg.properties.uptimeInSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versions"]) -> 'Versions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enrolledAt", "fingerprint", "hasSomeSensors", "id", "ip", "label", "status", "syncDelay", "uptimeInSeconds", "versions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrolledAt"]) -> typing.Union[MetaOapg.properties.enrolledAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fingerprint"]) -> typing.Union[MetaOapg.properties.fingerprint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasSomeSensors"]) -> typing.Union[MetaOapg.properties.hasSomeSensors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip"]) -> typing.Union[MetaOapg.properties.ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['CenterStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syncDelay"]) -> typing.Union[MetaOapg.properties.syncDelay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uptimeInSeconds"]) -> typing.Union[MetaOapg.properties.uptimeInSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versions"]) -> typing.Union['Versions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enrolledAt", "fingerprint", "hasSomeSensors", "id", "ip", "label", "status", "syncDelay", "uptimeInSeconds", "versions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        enrolledAt: typing.Union[MetaOapg.properties.enrolledAt, str, datetime, schemas.Unset] = schemas.unset,
        fingerprint: typing.Union[MetaOapg.properties.fingerprint, str, schemas.Unset] = schemas.unset,
        hasSomeSensors: typing.Union[MetaOapg.properties.hasSomeSensors, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        ip: typing.Union[MetaOapg.properties.ip, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        status: typing.Union['CenterStatus', schemas.Unset] = schemas.unset,
        syncDelay: typing.Union[MetaOapg.properties.syncDelay, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uptimeInSeconds: typing.Union[MetaOapg.properties.uptimeInSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        versions: typing.Union['Versions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Center':
        return super().__new__(
            cls,
            *_args,
            enrolledAt=enrolledAt,
            fingerprint=fingerprint,
            hasSomeSensors=hasSomeSensors,
            id=id,
            ip=ip,
            label=label,
            status=status,
            syncDelay=syncDelay,
            uptimeInSeconds=uptimeInSeconds,
            versions=versions,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.center_status import CenterStatus
from cybervision_client.model.versions import Versions
