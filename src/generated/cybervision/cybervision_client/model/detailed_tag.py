# coding: utf-8

"""
    Cisco Cyber Vision center v3 API.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cybervision_client import schemas  # noqa: F401


class DetailedTag(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    DetailedTag detailed tag serialization
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def category() -> typing.Type['Category']:
                return Category
            description = schemas.StrSchema
        
            @staticmethod
            def difference() -> typing.Type['Difference']:
                return Difference
            domain = schemas.StrSchema
            id = schemas.StrSchema
            important = schemas.BoolSchema
            label = schemas.StrSchema
            nbOccurences = schemas.Int64Schema
            riskScoreDescription = schemas.StrSchema
            type = schemas.StrSchema
            __annotations__ = {
                "category": category,
                "description": description,
                "difference": difference,
                "domain": domain,
                "id": id,
                "important": important,
                "label": label,
                "nbOccurences": nbOccurences,
                "riskScoreDescription": riskScoreDescription,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'Category': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["difference"]) -> 'Difference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["important"]) -> MetaOapg.properties.important: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nbOccurences"]) -> MetaOapg.properties.nbOccurences: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskScoreDescription"]) -> MetaOapg.properties.riskScoreDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["category", "description", "difference", "domain", "id", "important", "label", "nbOccurences", "riskScoreDescription", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union['Category', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["difference"]) -> typing.Union['Difference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["important"]) -> typing.Union[MetaOapg.properties.important, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nbOccurences"]) -> typing.Union[MetaOapg.properties.nbOccurences, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskScoreDescription"]) -> typing.Union[MetaOapg.properties.riskScoreDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["category", "description", "difference", "domain", "id", "important", "label", "nbOccurences", "riskScoreDescription", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        category: typing.Union['Category', schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        difference: typing.Union['Difference', schemas.Unset] = schemas.unset,
        domain: typing.Union[MetaOapg.properties.domain, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        important: typing.Union[MetaOapg.properties.important, bool, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        nbOccurences: typing.Union[MetaOapg.properties.nbOccurences, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        riskScoreDescription: typing.Union[MetaOapg.properties.riskScoreDescription, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DetailedTag':
        return super().__new__(
            cls,
            *_args,
            category=category,
            description=description,
            difference=difference,
            domain=domain,
            id=id,
            important=important,
            label=label,
            nbOccurences=nbOccurences,
            riskScoreDescription=riskScoreDescription,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from cybervision_client.model.category import Category
from cybervision_client.model.difference import Difference
