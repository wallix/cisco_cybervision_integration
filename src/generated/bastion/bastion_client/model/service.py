# coding: utf-8

"""
    WALLIX Bastion Rest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.12
    Contact: support@wallix.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bastion_client import schemas  # noqa: F401


class Service(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        @staticmethod
        def discriminator():
            return {
                'protocol': {
                    'RAWTCPIP': ServiceRawtcpip,
                    'RDP': ServiceRdp,
                    'RLOGIN': ServiceRlogin,
                    'SSH': ServiceSsh,
                    'TELNET': ServiceTelnet,
                    'VNC': ServiceVnc,
                    'service_rawtcpip': ServiceRawtcpip,
                    'service_rdp': ServiceRdp,
                    'service_rlogin': ServiceRlogin,
                    'service_ssh': ServiceSsh,
                    'service_telnet': ServiceTelnet,
                    'service_vnc': ServiceVnc,
                }
            }
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                ServiceSsh,
                ServiceRlogin,
                ServiceTelnet,
                ServiceRawtcpip,
                ServiceRdp,
                ServiceVnc,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Service':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from bastion_client.model.service_rawtcpip import ServiceRawtcpip
from bastion_client.model.service_rdp import ServiceRdp
from bastion_client.model.service_rlogin import ServiceRlogin
from bastion_client.model.service_ssh import ServiceSsh
from bastion_client.model.service_telnet import ServiceTelnet
from bastion_client.model.service_vnc import ServiceVnc
