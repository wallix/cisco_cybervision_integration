# coding: utf-8

"""
    WALLIX Bastion Rest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.12
    Contact: support@wallix.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bastion_client import schemas  # noqa: F401


class ScanJobProgressAdForAccounts(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ad_for_accounts": "AD_FOR_ACCOUNTS",
                    }
                
                @schemas.classproperty
                def AD_FOR_ACCOUNTS(cls):
                    return cls("ad_for_accounts")
            
            
            class total_operations(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            
            
            class done_operations(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            
            
            class accounts_found(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            __annotations__ = {
                "type": type,
                "total_operations": total_operations,
                "done_operations": done_operations,
                "accounts_found": accounts_found,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_operations"]) -> MetaOapg.properties.total_operations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["done_operations"]) -> MetaOapg.properties.done_operations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts_found"]) -> MetaOapg.properties.accounts_found: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "total_operations", "done_operations", "accounts_found", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_operations"]) -> typing.Union[MetaOapg.properties.total_operations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["done_operations"]) -> typing.Union[MetaOapg.properties.done_operations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts_found"]) -> typing.Union[MetaOapg.properties.accounts_found, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "total_operations", "done_operations", "accounts_found", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        total_operations: typing.Union[MetaOapg.properties.total_operations, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        done_operations: typing.Union[MetaOapg.properties.done_operations, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        accounts_found: typing.Union[MetaOapg.properties.accounts_found, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ScanJobProgressAdForAccounts':
        return super().__new__(
            cls,
            *_args,
            type=type,
            total_operations=total_operations,
            done_operations=done_operations,
            accounts_found=accounts_found,
            _configuration=_configuration,
            **kwargs,
        )
