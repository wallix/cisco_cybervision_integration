# coding: utf-8

"""
    WALLIX Bastion Rest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.12
    Contact: support@wallix.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bastion_client import schemas  # noqa: F401


class DevicePost(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "device_name",
            "host",
        }
        
        class properties:
            
            
            class device_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class host(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
            
            
            class alias(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 64
            
            
            class local_domains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['LocalDomains']:
                        return LocalDomains
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['LocalDomains'], typing.List['LocalDomains']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'local_domains':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LocalDomains':
                    return super().__getitem__(i)
            
            
            class services(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['Service']:
                        return Service
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Service'], typing.List['Service']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'services':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Service':
                    return super().__getitem__(i)
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['Tags']:
                        return Tags
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Tags'], typing.List['Tags']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tags':
                    return super().__getitem__(i)
            __annotations__ = {
                "device_name": device_name,
                "host": host,
                "description": description,
                "alias": alias,
                "local_domains": local_domains,
                "services": services,
                "tags": tags,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    device_name: MetaOapg.properties.device_name
    host: MetaOapg.properties.host
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alias"]) -> MetaOapg.properties.alias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["local_domains"]) -> MetaOapg.properties.local_domains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["services"]) -> MetaOapg.properties.services: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["device_name"], typing_extensions.Literal["host"], typing_extensions.Literal["description"], typing_extensions.Literal["alias"], typing_extensions.Literal["local_domains"], typing_extensions.Literal["services"], typing_extensions.Literal["tags"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alias"]) -> typing.Union[MetaOapg.properties.alias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["local_domains"]) -> typing.Union[MetaOapg.properties.local_domains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["services"]) -> typing.Union[MetaOapg.properties.services, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["device_name"], typing_extensions.Literal["host"], typing_extensions.Literal["description"], typing_extensions.Literal["alias"], typing_extensions.Literal["local_domains"], typing_extensions.Literal["services"], typing_extensions.Literal["tags"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        device_name: typing.Union[MetaOapg.properties.device_name, str, ],
        host: typing.Union[MetaOapg.properties.host, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        alias: typing.Union[MetaOapg.properties.alias, str, schemas.Unset] = schemas.unset,
        local_domains: typing.Union[MetaOapg.properties.local_domains, list, tuple, schemas.Unset] = schemas.unset,
        services: typing.Union[MetaOapg.properties.services, list, tuple, schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DevicePost':
        return super().__new__(
            cls,
            *_args,
            device_name=device_name,
            host=host,
            description=description,
            alias=alias,
            local_domains=local_domains,
            services=services,
            tags=tags,
            _configuration=_configuration,
        )

from bastion_client.model.local_domains import LocalDomains
from bastion_client.model.service import Service
from bastion_client.model.tags import Tags
