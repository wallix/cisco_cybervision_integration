# coding: utf-8

"""
    WALLIX Bastion Rest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.12
    Contact: support@wallix.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bastion_client import schemas  # noqa: F401


class ActiveDirectoryScanForDevices(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
            
            
            class emails(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 256
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'emails':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ad_for_devices": "AD_FOR_DEVICES",
                    }
                
                @schemas.classproperty
                def AD_FOR_DEVICES(cls):
                    return cls("ad_for_devices")
            
            
            class search_filter(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
        
            @staticmethod
            def userauth() -> typing.Type['AdUserAuthentication']:
                return AdUserAuthentication
            
            
            class dn_list(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dn_list':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class protocols(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NetworkProtocol']:
                        return NetworkProtocol
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['NetworkProtocol'], typing.List['NetworkProtocol']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'protocols':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NetworkProtocol':
                    return super().__getitem__(i)
            
            
            class banner_regex(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 255
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'banner_regex':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            scan_for_accounts = schemas.BoolSchema
            
            
            class master_accounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'master_accounts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "name": name,
                "description": description,
                "emails": emails,
                "type": type,
                "search_filter": search_filter,
                "userauth": userauth,
                "dn_list": dn_list,
                "protocols": protocols,
                "banner_regex": banner_regex,
                "scan_for_accounts": scan_for_accounts,
                "master_accounts": master_accounts,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["search_filter"]) -> MetaOapg.properties.search_filter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userauth"]) -> 'AdUserAuthentication': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dn_list"]) -> MetaOapg.properties.dn_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocols"]) -> MetaOapg.properties.protocols: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["banner_regex"]) -> MetaOapg.properties.banner_regex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scan_for_accounts"]) -> MetaOapg.properties.scan_for_accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["master_accounts"]) -> MetaOapg.properties.master_accounts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "description", "emails", "type", "search_filter", "userauth", "dn_list", "protocols", "banner_regex", "scan_for_accounts", "master_accounts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emails"]) -> typing.Union[MetaOapg.properties.emails, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["search_filter"]) -> typing.Union[MetaOapg.properties.search_filter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userauth"]) -> typing.Union['AdUserAuthentication', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dn_list"]) -> typing.Union[MetaOapg.properties.dn_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocols"]) -> typing.Union[MetaOapg.properties.protocols, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["banner_regex"]) -> typing.Union[MetaOapg.properties.banner_regex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scan_for_accounts"]) -> typing.Union[MetaOapg.properties.scan_for_accounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["master_accounts"]) -> typing.Union[MetaOapg.properties.master_accounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "description", "emails", "type", "search_filter", "userauth", "dn_list", "protocols", "banner_regex", "scan_for_accounts", "master_accounts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        emails: typing.Union[MetaOapg.properties.emails, list, tuple, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        search_filter: typing.Union[MetaOapg.properties.search_filter, str, schemas.Unset] = schemas.unset,
        userauth: typing.Union['AdUserAuthentication', schemas.Unset] = schemas.unset,
        dn_list: typing.Union[MetaOapg.properties.dn_list, list, tuple, schemas.Unset] = schemas.unset,
        protocols: typing.Union[MetaOapg.properties.protocols, list, tuple, schemas.Unset] = schemas.unset,
        banner_regex: typing.Union[MetaOapg.properties.banner_regex, list, tuple, schemas.Unset] = schemas.unset,
        scan_for_accounts: typing.Union[MetaOapg.properties.scan_for_accounts, bool, schemas.Unset] = schemas.unset,
        master_accounts: typing.Union[MetaOapg.properties.master_accounts, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ActiveDirectoryScanForDevices':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            description=description,
            emails=emails,
            type=type,
            search_filter=search_filter,
            userauth=userauth,
            dn_list=dn_list,
            protocols=protocols,
            banner_regex=banner_regex,
            scan_for_accounts=scan_for_accounts,
            master_accounts=master_accounts,
            _configuration=_configuration,
            **kwargs,
        )

from bastion_client.model.ad_user_authentication import AdUserAuthentication
from bastion_client.model.network_protocol import NetworkProtocol
