# coding: utf-8

"""
    WALLIX Bastion Rest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.12
    Contact: support@wallix.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bastion_client import schemas  # noqa: F401


class DeviceGet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            
            
            class device_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
            
            
            class alias(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 64
            
            
            class host(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
            class last_connection(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
            
            
            class local_domains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LocaldomainGet']:
                        return LocaldomainGet
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['LocaldomainGet'], typing.List['LocaldomainGet']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'local_domains':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LocaldomainGet':
                    return super().__getitem__(i)
            
            
            class services(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ServiceGet']:
                        return ServiceGet
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ServiceGet'], typing.List['ServiceGet']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'services':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ServiceGet':
                    return super().__getitem__(i)
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Tag']:
                        return Tag
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Tag'], typing.List['Tag']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tag':
                    return super().__getitem__(i)
            
            
            class onboard_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "onboarded": "ONBOARDED",
                        "to_onboard": "TO_ONBOARD",
                        "hide": "HIDE",
                        "manual": "MANUAL",
                    }
                
                @schemas.classproperty
                def ONBOARDED(cls):
                    return cls("onboarded")
                
                @schemas.classproperty
                def TO_ONBOARD(cls):
                    return cls("to_onboard")
                
                @schemas.classproperty
                def HIDE(cls):
                    return cls("hide")
                
                @schemas.classproperty
                def MANUAL(cls):
                    return cls("manual")
        
            @staticmethod
            def first_seen() -> typing.Type['ScanJob']:
                return ScanJob
        
            @staticmethod
            def last_seen() -> typing.Type['ScanJob']:
                return ScanJob
            url = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "device_name": device_name,
                "description": description,
                "alias": alias,
                "host": host,
                "last_connection": last_connection,
                "local_domains": local_domains,
                "services": services,
                "tags": tags,
                "onboard_status": onboard_status,
                "first_seen": first_seen,
                "last_seen": last_seen,
                "url": url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alias"]) -> MetaOapg.properties.alias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_connection"]) -> MetaOapg.properties.last_connection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["local_domains"]) -> MetaOapg.properties.local_domains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["services"]) -> MetaOapg.properties.services: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboard_status"]) -> MetaOapg.properties.onboard_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_seen"]) -> 'ScanJob': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_seen"]) -> 'ScanJob': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "device_name", "description", "alias", "host", "last_connection", "local_domains", "services", "tags", "onboard_status", "first_seen", "last_seen", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_name"]) -> typing.Union[MetaOapg.properties.device_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alias"]) -> typing.Union[MetaOapg.properties.alias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host"]) -> typing.Union[MetaOapg.properties.host, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_connection"]) -> typing.Union[MetaOapg.properties.last_connection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["local_domains"]) -> typing.Union[MetaOapg.properties.local_domains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["services"]) -> typing.Union[MetaOapg.properties.services, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboard_status"]) -> typing.Union[MetaOapg.properties.onboard_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_seen"]) -> typing.Union['ScanJob', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_seen"]) -> typing.Union['ScanJob', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "device_name", "description", "alias", "host", "last_connection", "local_domains", "services", "tags", "onboard_status", "first_seen", "last_seen", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        device_name: typing.Union[MetaOapg.properties.device_name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        alias: typing.Union[MetaOapg.properties.alias, str, schemas.Unset] = schemas.unset,
        host: typing.Union[MetaOapg.properties.host, str, schemas.Unset] = schemas.unset,
        last_connection: typing.Union[MetaOapg.properties.last_connection, str, schemas.Unset] = schemas.unset,
        local_domains: typing.Union[MetaOapg.properties.local_domains, list, tuple, schemas.Unset] = schemas.unset,
        services: typing.Union[MetaOapg.properties.services, list, tuple, schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
        onboard_status: typing.Union[MetaOapg.properties.onboard_status, str, schemas.Unset] = schemas.unset,
        first_seen: typing.Union['ScanJob', schemas.Unset] = schemas.unset,
        last_seen: typing.Union['ScanJob', schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeviceGet':
        return super().__new__(
            cls,
            *_args,
            id=id,
            device_name=device_name,
            description=description,
            alias=alias,
            host=host,
            last_connection=last_connection,
            local_domains=local_domains,
            services=services,
            tags=tags,
            onboard_status=onboard_status,
            first_seen=first_seen,
            last_seen=last_seen,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from bastion_client.model.localdomain_get import LocaldomainGet
from bastion_client.model.scan_job import ScanJob
from bastion_client.model.service_get import ServiceGet
from bastion_client.model.tag import Tag
