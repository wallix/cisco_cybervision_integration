# coding: utf-8

"""
    WALLIX Bastion Rest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.12
    Contact: support@wallix.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bastion_client import schemas  # noqa: F401


class RawtcpipServiceMultiTunneling(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The multi-tunneling.
    """


    class MetaOapg:
        
        class properties:
            enabled = schemas.BoolSchema
            
            
            class additional_interfaces(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RawtcpipServiceMultiTunnelingAdditionalInterface']:
                        return RawtcpipServiceMultiTunnelingAdditionalInterface
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RawtcpipServiceMultiTunnelingAdditionalInterface'], typing.List['RawtcpipServiceMultiTunnelingAdditionalInterface']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additional_interfaces':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RawtcpipServiceMultiTunnelingAdditionalInterface':
                    return super().__getitem__(i)
            __annotations__ = {
                "enabled": enabled,
                "additional_interfaces": additional_interfaces,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_interfaces"]) -> MetaOapg.properties.additional_interfaces: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enabled", "additional_interfaces", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_interfaces"]) -> typing.Union[MetaOapg.properties.additional_interfaces, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enabled", "additional_interfaces", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        additional_interfaces: typing.Union[MetaOapg.properties.additional_interfaces, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RawtcpipServiceMultiTunneling':
        return super().__new__(
            cls,
            *_args,
            enabled=enabled,
            additional_interfaces=additional_interfaces,
            _configuration=_configuration,
            **kwargs,
        )

from bastion_client.model.rawtcpip_service_multi_tunneling_additional_interface import RawtcpipServiceMultiTunnelingAdditionalInterface
