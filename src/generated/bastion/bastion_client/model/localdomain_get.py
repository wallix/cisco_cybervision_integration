# coding: utf-8

"""
    WALLIX Bastion Rest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.12
    Contact: support@wallix.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bastion_client import schemas  # noqa: F401


class LocaldomainGet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            
            
            class domain_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
            enable_password_change = schemas.BoolSchema
            
            
            class admin_account(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 512
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'admin_account':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class password_change_policy(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'password_change_policy':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class password_change_plugin(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'password_change_plugin':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            password_change_plugin_parameters = schemas.DictSchema
            ca_private_key = schemas.StrSchema
            ca_public_key = schemas.StrSchema
            url = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "domain_name": domain_name,
                "description": description,
                "enable_password_change": enable_password_change,
                "admin_account": admin_account,
                "password_change_policy": password_change_policy,
                "password_change_plugin": password_change_plugin,
                "password_change_plugin_parameters": password_change_plugin_parameters,
                "ca_private_key": ca_private_key,
                "ca_public_key": ca_public_key,
                "url": url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain_name"]) -> MetaOapg.properties.domain_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_password_change"]) -> MetaOapg.properties.enable_password_change: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin_account"]) -> MetaOapg.properties.admin_account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password_change_policy"]) -> MetaOapg.properties.password_change_policy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password_change_plugin"]) -> MetaOapg.properties.password_change_plugin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password_change_plugin_parameters"]) -> MetaOapg.properties.password_change_plugin_parameters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ca_private_key"]) -> MetaOapg.properties.ca_private_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ca_public_key"]) -> MetaOapg.properties.ca_public_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "domain_name", "description", "enable_password_change", "admin_account", "password_change_policy", "password_change_plugin", "password_change_plugin_parameters", "ca_private_key", "ca_public_key", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain_name"]) -> typing.Union[MetaOapg.properties.domain_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_password_change"]) -> typing.Union[MetaOapg.properties.enable_password_change, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin_account"]) -> typing.Union[MetaOapg.properties.admin_account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password_change_policy"]) -> typing.Union[MetaOapg.properties.password_change_policy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password_change_plugin"]) -> typing.Union[MetaOapg.properties.password_change_plugin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password_change_plugin_parameters"]) -> typing.Union[MetaOapg.properties.password_change_plugin_parameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ca_private_key"]) -> typing.Union[MetaOapg.properties.ca_private_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ca_public_key"]) -> typing.Union[MetaOapg.properties.ca_public_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "domain_name", "description", "enable_password_change", "admin_account", "password_change_policy", "password_change_plugin", "password_change_plugin_parameters", "ca_private_key", "ca_public_key", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        domain_name: typing.Union[MetaOapg.properties.domain_name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        enable_password_change: typing.Union[MetaOapg.properties.enable_password_change, bool, schemas.Unset] = schemas.unset,
        admin_account: typing.Union[MetaOapg.properties.admin_account, None, str, schemas.Unset] = schemas.unset,
        password_change_policy: typing.Union[MetaOapg.properties.password_change_policy, None, str, schemas.Unset] = schemas.unset,
        password_change_plugin: typing.Union[MetaOapg.properties.password_change_plugin, None, str, schemas.Unset] = schemas.unset,
        password_change_plugin_parameters: typing.Union[MetaOapg.properties.password_change_plugin_parameters, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ca_private_key: typing.Union[MetaOapg.properties.ca_private_key, str, schemas.Unset] = schemas.unset,
        ca_public_key: typing.Union[MetaOapg.properties.ca_public_key, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LocaldomainGet':
        return super().__new__(
            cls,
            *_args,
            id=id,
            domain_name=domain_name,
            description=description,
            enable_password_change=enable_password_change,
            admin_account=admin_account,
            password_change_policy=password_change_policy,
            password_change_plugin=password_change_plugin,
            password_change_plugin_parameters=password_change_plugin_parameters,
            ca_private_key=ca_private_key,
            ca_public_key=ca_public_key,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )
